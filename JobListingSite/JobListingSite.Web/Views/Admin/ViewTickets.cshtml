@model X.PagedList.IPagedList<JobListingSite.Data.Entities.HRTicket>
@using JobListingSite.Data.Enums
@using X.PagedList.Mvc.Core

@{
    ViewData["Title"] = "Manage Tickets";
    Layout = "_Layout";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<style>
    body {
        background: linear-gradient(135deg, #43cea2, #185a9d);
        font-family: 'Segoe UI', sans-serif;
    }

    td {
        word-break: break-word;
    }

    .btn-ombre, .btn-danger, .btn-secondary {
        font-weight: 600;
        border-radius: 12px;
        min-width: 110px;
        height: 45px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 6px;
        transition: all 0.3s ease;
    }

        .btn-ombre:hover, .btn-danger:hover, .btn-secondary:hover {
            transform: translateY(-2px) scale(1.03);
            box-shadow: 0 0 12px rgba(0, 0, 0, 0.2);
        }


    .card-container {
        background: white;
        border-radius: 24px;
        padding: 2.5rem;
        margin: 3rem auto;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        max-width: 1200px;
        animation: fadeInUp 0.6s ease;
    }

    h2 {
        font-weight: 700;
        color: #212529;
        text-align: center;
        margin-bottom: 2rem;
    }

    .ticket-card {
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        transition: transform 0.3s ease;
    }

        .ticket-card:hover {
            transform: scale(1.01);
        }

    .badge-status, .badge-priority {
        border-radius: 20px;
        padding: 8px 16px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .badge-pending {
        background: linear-gradient(to right, #fceabb, #f8b500);
        color: #5c4b00;
    }

    .badge-resolved {
        background: linear-gradient(to right, #28a745, #43cea2);
        color: white;
    }

    .badge-priority-low {
        background: linear-gradient(to right, #36d1dc, #5b86e5);
        color: white;
    }

    .badge-priority-normal {
        background: linear-gradient(to right, #43cea2, #28a745);
        color: white;
    }

    .badge-priority-high {
        background: linear-gradient(to right, #f7971e, #ffd200);
        color: white;
    }

    .badge-priority-urgent {
        background: linear-gradient(to right, #f8576c, #ff5858);
        color: white;
    }

    .btn-ombre {
        background: linear-gradient(to right, #43cea2, #185a9d);
        border: none;
        color: white;
        font-weight: 600;
        border-radius: 12px;
        padding: 10px 20px;
        transition: all 0.3s ease;
    }

        .btn-ombre:hover {
            transform: scale(1.05);
            box-shadow: 0 0 15px rgba(24, 90, 157, 0.7);
        }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@media (max-width: 768px) {
        .table thead {
            display: none;
        }

        .table tbody {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            align-items: center;
        }

            .table tbody tr {
                background: #ffffff;
                border-radius: 16px;
                padding: 1.5rem;
                width: 90%;
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                display: block;
                text-align: center;
            }

        .table td {
            display: block;
            border: none;
        }
    }
</style>

<div class="card-container">
    <h2><i class="fas fa-tasks"></i> HR Support Tickets</h2>

    @if (Model.Any())
    {
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr class="text-center">
                        <th>Title</th>
                        <th>Description</th>
                        <th>Priority</th>
                        <th>Created By</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ticket in Model)
                    {
                        <tr class="text-center">
                            <td>@ticket.Title</td>
                            <td title="@ticket.Description">
                                @(ticket.Description.Length > 150 ? ticket.Description.Substring(0, 150) + "..." : ticket.Description)
                            </td>
                            <td><span class="badge-priority @GetPriorityClass(ticket.Priority)">@ticket.Priority</span></td>
                            <td>@ticket.CreatedBy?.Email</td>
                            <td>
                                @if (ticket.Status == TicketStatus.Open)
                                {
                                    <span class="badge-status badge-pending">Pending</span>
                                }
                                else
                                {
                                    <span class="badge-status badge-resolved">Resolved</span>
                                }
                            </td>
                            <td class="text-center">
                                <div class="d-flex flex-wrap justify-content-center gap-2">
                                    @if (ticket.Status == TicketStatus.Open)
                                    {
                                        <button type="button" class="btn btn-ombre btn-sm mb-1" onclick="confirmResolve(@ticket.Id)">
                                            <i class="fas fa-check"></i> <span class="d-none d-md-inline">Resolve</span>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-secondary btn-sm mb-1" disabled>
                                            <i class="fas fa-check-double"></i> <span class="d-none d-md-inline">Resolved</span>
                                        </button>
                                    }

                                    <form id="deleteForm-@ticket.Id" asp-action="DeleteTicketAdmin" method="post" asp-route-id="@ticket.Id" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <button type="button" class="btn btn-danger btn-sm" onclick="confirmDelete(@ticket.Id)">
                                            <i class="fas fa-trash"></i> <span class="d-none d-md-inline">Delete</span>
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>

        </div>

        <div class="mt-4">
            @Html.PagedListPager(Model, page => Url.Action("ViewTickets", new { page }), new PagedListRenderOptions
        {
        UlElementClasses = new[] { "pagination justify-content-center" },
        LiElementClasses = new[] { "page-item" },
        PageClasses = new[] { "page-link" }
        })
        </div>
    }
    else
    {
        <div class="text-center text-muted">
            <i class="fas fa-inbox fa-2x mb-3"></i>
            <h5>No tickets found.</h5>
        </div>
    }

    <div class="text-center mt-4">
        <a asp-action="Dashboard" asp-controller="Admin" class="btn btn-ombre">
            <i class="fas fa-arrow-left me-1"></i> Back to Admin Dashboard
        </a>
    </div>

</div>

@functions {
    public string GetPriorityClass(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.Low => "badge-priority-low",
            TicketPriority.Normal => "badge-priority-normal",
            TicketPriority.High => "badge-priority-high",
            TicketPriority.Urgent => "badge-priority-urgent",
            _ => "badge-priority-normal"
        };
    }
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    
    <script>
        function confirmDelete(ticketId) {
            Swal.fire({
                title: 'Are you sure you want to delete this ticket?',
                text: "This action cannot be undone!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete it!',
                background: 'white',
                color: '#212529'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById('deleteForm-' + ticketId).submit();
                }
            });
        }

        function confirmResolve(ticketId) {
            Swal.fire({
                title: 'Mark as Resolved?',
                text: "The ticket will be marked as resolved.",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, resolve it!',
                background: 'white',
                color: '#212529'
            }).then((result) => {
                if (result.isConfirmed) {
                    const form = document.createElement('form');
                    form.method = 'post';
                    form.action = '/Admin/ResolveTicket';  

                    const hiddenField = document.createElement('input');
                    hiddenField.type = 'hidden';
                    hiddenField.name = 'id';
                    hiddenField.value = ticketId;

                    form.appendChild(hiddenField);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }
    </script>


    @if (TempData["SuccessMessage"] != null)
    {
        <script>
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: '@TempData["SuccessMessage"]',
                confirmButtonColor: '#28a745'
            });
        </script>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <script>
            Swal.fire({
                icon: 'error',
                title: 'Oops!',
                text: '@TempData["ErrorMessage"]',
                confirmButtonColor: '#dc3545'
            });
        </script>
    }
}

