@model X.PagedList.IPagedList<JobListingSite.Data.Entities.HRTicket>
@using JobListingSite.Data.Enums
@using X.PagedList.Mvc.Core

@{
    ViewData["Title"] = "Manage Tickets";
    Layout = "_Layout";
}

<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<style>
    body {
        background: linear-gradient(135deg,#43cea2,#185a9d);
        font-family: 'Segoe UI', sans-serif;
    }

    .card-container {
        background: white;
        border-radius: 24px;
        padding: 2.5rem;
        margin: 3rem auto;
        max-width: 1100px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        animation: fadeInUp .6s ease;
    }

    .ticket-card {
        background: white;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        transition: transform .3s ease;
    }

        .ticket-card:hover {
            transform: scale(1.01);
        }

        .ticket-card h5 {
            font-weight: 600;
        }

    .badge-status, .badge-priority {
        border-radius: 50px;
        padding: 8px 16px;
        font-weight: 600;
        font-size: .9rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .badge-pending {
        background: linear-gradient(to right,#6c757d,#495057);
        color: #fff;
    }

    .badge-resolved {
        background: linear-gradient(to right,#28a745,#43cea2);
        color: #fff;
    }

    .badge-priority-low {
        background: linear-gradient(to right,#36d1dc,#5b86e5);
        color: #fff;
    }

    .badge-priority-normal {
        background: linear-gradient(to right,#43cea2,#28a745);
        color: #fff;
    }

    .badge-priority-high {
        background: linear-gradient(to right,#f7971e,#ffd200);
        color: #000;
    }

    .badge-priority-urgent {
        background: linear-gradient(to right,#f8576c,#ff5858);
        color: #fff;
    }

    .action-buttons {
        margin-top: 1rem;
        display: flex;
        gap: .5rem;
        flex-wrap: wrap;
    }

        .action-buttons button,
        .action-buttons form .btn {
            font-size: .85rem;
            padding: 6px 10px;
            display: inline-flex;
            align-items: center;
            gap: .25rem;
            transition: box-shadow .2s,transform .2s;
        }

    .btn-ombre {
        background: linear-gradient(to right,#43cea2,#185a9d);
        color: #fff;
        border: none;
        border-radius: 8px;
    }

        .btn-ombre:hover {
            box-shadow: 0 4px 12px rgba(24,90,157,0.3);
            transform: translateY(-2px);
        }

    .btn-secondary {
        background: #6c757d;
        color: #fff;
        border: none;
        border-radius: 8px;
    }

        .btn-secondary:hover {
            box-shadow: 0 4px 12px rgba(108,117,125,0.3);
            transform: translateY(-2px);
        }

    .btn-danger {
        background: linear-gradient(to right,#f8576c,#ff5858);
        color: #fff;
        border: none;
        border-radius: 8px;
    }

        .btn-danger:hover {
            box-shadow: 0 4px 12px rgba(248,87,108,0.3);
            transform: translateY(-2px);
        }

    .reply-box {
        width: 100%;
        border-radius: 8px;
        padding: .5rem;
        margin-top: .75rem;
        resize: vertical;
        min-height: 3rem;
    }

    @@media(max-width:576px) {
        .action-buttons {
            justify-content: center;
        }

        .btn-text {
            display: none;
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<div class="card-container">
    <h2>
        <i class="fas fa-tasks me-2"></i> HR Support Tickets
        @if ((int?)ViewBag.UnreadHRReplies > 0)
        {
            <span class="badge bg-danger ms-2">@ViewBag.UnreadHRReplies</span>
        }
    </h2>

    @if (!Model.Any())
    {
        <div class="text-center text-muted py-5">
            <i class="fas fa-inbox fa-3x mb-3"></i>
            <h5>No tickets found.</h5>
        </div>
    }
    else
    {
        @foreach (var ticket in Model)
        {
            <div class="ticket-card">
                <div class="d-flex justify-content-between flex-wrap align-items-center mb-2">
                    <h5><i class="fas fa-tag me-2"></i>@ticket.Title</h5>
                    <div class="d-flex flex-wrap gap-2">
                        <span class="badge-status @(ticket.Status == TicketStatus.Open ? "badge-pending" : "badge-resolved")">
                            @(ticket.Status == TicketStatus.Open ? "Pending" : "Resolved")
                        </span>
                        <span class="badge-priority @GetPriorityClass(ticket.Priority)">
                            @ticket.Priority
                        </span>
                    </div>
                </div>

                <p class="text-muted mt-2" title="@ticket.Description">
                    <i class="fas fa-align-left me-1"></i>
                    @(ticket.Description.Length > 150
                        ? ticket.Description.Substring(0, 150) + "…"
                        : ticket.Description)
                </p>

                <div class="mt-2 text-muted">
                    <i class="fas fa-calendar-alt me-1"></i>
                    @ticket.CreatedAt.ToLocalTime().ToString("g")
                </div>

                @* HR’s reply, if any *@
                @if (!string.IsNullOrEmpty(ticket.HRReply))
                {
                    <div class="alert alert-warning mt-3">
                        <strong>HR replied:</strong>
                        <p class="mb-1">@ticket.HRReply</p>
                        <small class="text-muted">
                            on @ticket.HRRepliedAt?.ToLocalTime().ToString("g")
                        </small>
                    </div>
                }

                <div class="action-buttons">
                    @if (ticket.Status == TicketStatus.Open)
                    {
                        <button type="button"
                    class="btn btn-secondary btn-sm"
                    onclick="confirmResolve(@ticket.Id)">
                            <i class="fas fa-check"></i> <span class="btn-text">Resolve</span>
                        </button>
                    }

                    <form id="deleteForm-@ticket.Id"
                  asp-action="DeleteTicketAdmin"
                  method="post"
                  asp-route-id="@ticket.Id"
                  class="d-inline">
                        @Html.AntiForgeryToken()
                        <button type="button"
                        class="btn btn-danger btn-sm"
                        onclick="confirmDelete(@ticket.Id)">
                            <i class="fas fa-trash"></i> <span class="btn-text">Delete</span>
                        </button>
                    </form>
                </div>

                @* Admin’s inline reply form *@
                @if (ticket.Status == TicketStatus.Open)
                {
                    <form asp-action="ReplyToTicket"
              asp-controller="Admin"
              method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@ticket.Id" />
                        <textarea name="reply"
                      class="reply-box"
                      placeholder="Write your reply…"
                      required></textarea>
                        <button type="submit"
                    class="btn btn-ombre btn-sm mt-1">
                            <i class="fas fa-paper-plane me-1"></i>
                            <span class="btn-text">Send</span>
                        </button>
                    </form>
                }
            </div>
        }

        <div class="mt-4 text-center">
            @Html.PagedListPager(
        Model,
        page => Url.Action("ViewTickets", new { page }),
        new PagedListRenderOptions {
        UlElementClasses = new[] { "pagination justify-content-center" },
        LiElementClasses = new[] { "page-item" },
        PageClasses      = new[] { "page-link" }
        })
        </div>
    }

    <div class="text-center mt-4">
        <a asp-action="Dashboard"
           asp-controller="Admin"
           class="btn btn-ombre">
            <i class="fas fa-arrow-left me-1"></i>
            <span class="btn-text">Back to Admin Dashboard</span>
        </a>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function confirmDelete(id) {
            Swal.fire({
                title: 'Delete this ticket?',
                text: "This action cannot be undone!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete it!'
            }).then(res => {
                if (res.isConfirmed) {
                    document.getElementById('deleteForm-' + id).submit();
                }
            });
        }

        function confirmResolve(id) {
            Swal.fire({
                title: 'Mark as resolved?',
                text: "You can still reply afterward.",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, resolve it!'
            }).then(res => {
                if (res.isConfirmed) {
                    const f = document.createElement('form');
                    f.method = 'post';
                    f.action = '@Url.Action("ResolveTicket","Admin")';
                    const inp = document.createElement('input');
                    inp.type = 'hidden'; inp.name = 'id'; inp.value = id;
                    f.appendChild(inp);
                    document.body.appendChild(f);
                    f.submit();
                }
            });
        }
    </script>
}

    @functions {
    public string GetPriorityClass(TicketPriority p) => p switch
    {
        TicketPriority.Low => "badge-priority-low",
        TicketPriority.Normal => "badge-priority-normal",
        TicketPriority.High => "badge-priority-high",
        TicketPriority.Urgent => "badge-priority-urgent",
        _ => "badge-priority-normal"
    };
}
