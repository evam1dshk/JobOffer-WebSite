@model X.PagedList.IPagedList<JobListingSite.Data.Entities.HRTicket>
@using JobListingSite.Data.Enums
@using X.PagedList.Mvc.Core


@{
    ViewData["Title"] = "My Tickets";
    Layout = "_Layout";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<style>
    body {
        background: linear-gradient(135deg, #43cea2, #185a9d);
        font-family: 'Segoe UI', sans-serif;
    }

    td {
        word-break: break-word;
    }

    .card-container {
        background: white;
        border-radius: 24px;
        padding: 2.5rem;
        margin: 3rem auto;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        max-width: 1100px;
        animation: fadeInUp 0.6s ease;
    }

    h2 {
        font-weight: 700;
        color: #212529;
        text-align: center;
        margin-bottom: 2rem;
    }

    .ticket-card {
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        transition: transform 0.3s ease;
    }

        .ticket-card:hover {
            transform: scale(1.01);
        }

    .badge-status, .badge-priority {
        border-radius: 50px;
        padding: 8px 16px;
        font-weight: 600;
        font-size: 0.9rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .badge-pending {
        background: linear-gradient(to right, #6c757d, #495057);
        color: white;
    }

    .badge-resolved {
        background: linear-gradient(to right, #28a745, #43cea2);
        color: white;
    }

    .badge-priority-low {
        background: linear-gradient(to right, #36d1dc, #5b86e5);
        color: white;
    }

    .badge-priority-normal {
        background: linear-gradient(to right, #43cea2, #28a745);
        color: white;
    }

    .badge-priority-high {
        background: linear-gradient(to right, #f7971e, #ffd200);
        color: white;
    }

    .badge-priority-urgent {
        background: linear-gradient(to right, #f8576c, #ff5858);
        color: white;
    }

    .btn-back {
        background: linear-gradient(to right, #434343, #000000);
        border: none;
        color: white;
        font-weight: 600;
        border-radius: 12px;
        padding: 12px 24px;
        transition: all 0.3s ease;
    }

    .btn-back:hover {
        color: #43cea2;
        box-shadow: 0 0 15px rgba(24, 90, 157, 0.7);
        transform: scale(1.05);
    }

    @@keyframes fadeInUp {
        from { opacity: 0; transform: translateY(30px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @@media (max-width: 768px) {
        .card-container {
            padding: 2rem 1rem;
        }

        .ticket-card {
            padding: 1.2rem;
        }
    }
</style>

<div class="card-container">
    <h2><i class="fas fa-ticket-alt me-2"></i> My Support Tickets</h2>

    @if (Model.Any())
    {
        foreach (var ticket in Model)
        {
            <div class="ticket-card">
                <div class="d-flex justify-content-between flex-wrap align-items-center mb-2">
                    <h5 class="fw-bold"><i class="fas fa-tag me-2"></i> @ticket.Title</h5>

                    <div class="d-flex flex-wrap gap-2">
                        @if (ticket.Status == TicketStatus.Open)
                        {
                            <span class="badge-status badge-pending">Pending</span>
                        }
                        else
                        {
                            <span class="badge-status badge-resolved">Resolved</span>
                        }

                        @if (!string.IsNullOrEmpty(ticket.AdminReply))
                        {
                            <div class="alert alert-info mt-2">
                                <strong>Admin Reply:</strong><br />
                                @ticket.AdminReply <br />
                                <small class="text-muted">on @ticket.RepliedAt?.ToLocalTime().ToString("g")</small>
                            </div>
                        }


                        <span class="badge-priority @GetPriorityClass(ticket.Priority)">
                            @ticket.Priority
                        </span>
                    </div>
                </div>

                <p class="text-muted mt-2" title="@ticket.Description">
                    <i class="fas fa-align-left me-1"></i>
                    @(ticket.Description.Length > 150 ? ticket.Description.Substring(0, 150) + "..." : ticket.Description)
                </p>

                <div class="d-flex flex-wrap gap-3 mt-3">
                    <span><i class="fas fa-calendar-alt text-success me-1"></i> <strong>Created:</strong> @ticket.CreatedAt.ToLocalTime().ToShortDateString()</span>
                </div>

                <form id="deleteForm-@ticket.Id" asp-action="DeleteTicket" method="post" asp-route-id="@ticket.Id" class="d-inline">
                    @Html.AntiForgeryToken()
                    <button type="button" class="btn btn-ombre btn-sm" onclick="confirmDelete(@ticket.Id)">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </form>
            </div>
        }
        <div class="mt-4">
            @Html.PagedListPager(Model, page => Url.Action("CreatedTicket", new { page }), new PagedListRenderOptions
        {
        UlElementClasses = new[] { "pagination justify-content-center" },
        LiElementClasses = new[] { "page-item" },
        PageClasses = new[] { "page-link" }
        })
        </div>
    }
    else
    {
        <div class="text-center text-muted my-5">
            <i class="fas fa-inbox fa-3x mb-3"></i>
            <h5>No support tickets found.</h5>
        </div>
    }

    <div class="text-center mt-4">
        <a asp-action="Dashboard" asp-controller="HR" class="btn btn-back">
            <i class="fas fa-arrow-left me-1"></i> Back to Dashboard
        </a>
    </div>
</div>

@functions {
    public string GetPriorityClass(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.Low => "badge-priority-low",
            TicketPriority.Normal => "badge-priority-normal",
            TicketPriority.High => "badge-priority-high",
            TicketPriority.Urgent => "badge-priority-urgent",
            _ => "badge-priority-normal"
        };
    }
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    @if (TempData["TicketCreated"] != null)
    {
        <script>
            Swal.fire({
                icon: 'success',
                title: 'Ticket Submitted!',
                text: 'Your support ticket was created successfully!',
                confirmButtonColor: '#28a745'
            });
        </script>
    }

    <script>
        function confirmDelete(ticketId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "This ticket will be permanently deleted!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete it!',
                background: 'white',
                color: '#212529'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById('deleteForm-' + ticketId).submit();
                }
            });
        }
    </script>
}
