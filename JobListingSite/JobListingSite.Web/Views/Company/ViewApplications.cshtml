@using JobListingSite.Data.Enums
@using Microsoft.AspNetCore.Html
@model JobApplicationsViewModel

@{
    ViewData["Title"] = "Job Applications";
}

<style>
    body {
        background: linear-gradient(135deg, #43cea2, #185a9d);
        font-family: 'Segoe UI', sans-serif;
    }

    .job-card {
        animation: fadeInUp 0.6s ease;
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
    }

        .job-card h2 {
            font-weight: 600;
            color: #185a9d;
        }

    .btn-outline-green {
        color: #28a745;
        border-color: #28a745;
    }

        .btn-outline-green:hover {
            background: linear-gradient(to right, #28a745, #43cea2);
            color: white;
            border: none;
        }

    .btn-gradient {
        background: linear-gradient(to right, #28a745, #43cea2);
        color: white !important;
        font-weight: 500;
        border: none;
        border-radius: 8px;
        transition: 0.3s ease;
    }

        .btn-gradient:hover {
            background: linear-gradient(to right, #43cea2, #28a745);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .table-success th {
        background-color: #e6fff2;
        color: #155724;
    }

    .modal-content {
        border-radius: 1rem;
    }

    .toast {
        box-shadow: 0 0 20px rgba(0, 255, 128, 0.3);
        border-radius: 1rem;
        color: white;
        padding: 0.75rem 1.25rem;
        font-size: 0.95rem;
        animation: slideIn 0.5s ease forwards;
        backdrop-filter: blur(6px);
    }

        .toast.text-bg-success {
            background: linear-gradient(135deg, #38b000, #70e000);
        }

        .toast.text-bg-warning {
            background: linear-gradient(135deg, #f7c948, #faca2b);
            color: #5c4400;
        }

    @@keyframes slideIn {
        0% {
            opacity: 0;
            transform: translateX(100%);
        }

        100% {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .custom-tabs .tab-btn {
        background: white;
        color: #185a9d;
        padding: 10px 18px;
        border-radius: 30px;
        font-weight: 500;
        border: 2px solid transparent;
        text-decoration: none;
        transition: 0.3s ease;
        display: inline-flex;
        align-items: center;
    }

        .custom-tabs .tab-btn:hover {
            background: #f0fdf4;
            border-color: #43cea2;
            color: #28a745;
            box-shadow: 0 2px 8px rgba(67, 206, 162, 0.25);
        }

        .custom-tabs .tab-btn.active {
            background: linear-gradient(to right, #28a745, #43cea2);
            color: white !important;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            font-weight: 600;
        }
</style>

<div class="card shadow p-4">

    <!-- ✅ Toast Notifications -->
    <div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 p-3" style="z-index: 1055;">
        @if (TempData["Success"] != null)
        {
            <div class="toast align-items-center text-bg-success border-0 show fade" role="alert">
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="bi bi-check-circle-fill me-2"></i> @TempData["Success"]
                    </div>
                    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        }

        @if (TempData["Warning"] != null)
        {
            <div class="toast align-items-center text-bg-warning border-0 show fade" role="alert">
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i> @TempData["Warning"]
                    </div>
                    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        }
    </div>

    <h2 class="mb-4">Applications for: <span class="text-success">@Model.OfferTitle</span></h2>

    @{
        var currentStatus = Context.Request.Query["statusFilter"].ToString();
        string tabUrl(string? status) => Url.Action("ViewApplications", new { id = Model.OfferId, statusFilter = status });
    }

    <div class="custom-tabs mb-4 d-flex gap-2 flex-wrap">
        <a href="@tabUrl(null)" class="tab-btn @(string.IsNullOrEmpty(currentStatus) ? "active" : "")">
            <i class="bi bi-list-task me-1"></i> All
        </a>
        <a href="@tabUrl("Pending")" class="tab-btn @(currentStatus == "Pending" ? "active" : "")">
            <i class="bi bi-hourglass-split me-1"></i> Pending
        </a>
        <a href="@tabUrl("Approved")" class="tab-btn @(currentStatus == "Approved" ? "active" : "")">
            <i class="bi bi-check-circle me-1"></i> Approved
        </a>
        <a href="@tabUrl("Rejected")" class="tab-btn @(currentStatus == "Rejected" ? "active" : "")">
            <i class="bi bi-x-circle me-1"></i> Rejected
        </a>
    </div>

    <table class="table table-striped table-bordered">
        <thead class="table-success">
            <tr>
                <th>Applicant</th>
                <th>Email</th>
                <th>Applied On</th>
                <th>Status</th>
                <th style="width: 160px;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var app in Model.Applications)
            {
                <tr>
                    <td>@app.ApplicantName</td>
                    <td>@app.ApplicantEmail</td>
                    <td>@app.AppliedOn.ToShortDateString()</td>
                    <td>
                        @Html.Raw(GetBadgeHtml(app.Status).ToString())
                    </td>
                    <td>
                        @if (app.Status == ApplicationStatus.Pending)
                        {
                            <button type="button" class="btn btn-success btn-sm me-1" data-bs-toggle="modal" data-bs-target="#approveModal-@app.Id">Approve</button>
                            <button type="button" class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#rejectModal-@app.Id">Reject</button>
                        }
                        else
                        {
                            <span class="text-muted">—</span>
                        }
                    </td>
                </tr>

                <!-- ✅ Approve Modal -->
                <div class="modal fade" id="approveModal-@app.Id" tabindex="-1" aria-labelledby="approveLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <form asp-action="ApproveApplication" method="post">
                                <div class="modal-header">
                                    <h5 class="modal-title">Approve Application</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to approve <strong>@app.ApplicantName</strong>'s application?
                                </div>
                                <div class="modal-footer">
                                    <input type="hidden" name="applicationId" value="@app.Id" />
                                    <button type="button" class="btn btn-outline-green" data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" class="btn btn-gradient px-4">
                                        <i class="bi bi-check-circle me-1"></i> Approve
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- ❌ Reject Modal -->
                <div class="modal fade" id="rejectModal-@app.Id" tabindex="-1" aria-labelledby="rejectLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <form asp-action="RejectApplication" method="post">
                                <div class="modal-header">
                                    <h5 class="modal-title">Reject Application</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to reject <strong>@app.ApplicantName</strong>'s application?
                                </div>
                                <div class="modal-footer">
                                    <input type="hidden" name="applicationId" value="@app.Id" />
                                    <button type="button" class="btn btn-outline-green" data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" class="btn btn-gradient px-4">
                                        <i class="bi bi-x-circle me-1"></i> Reject
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </tbody>
    </table>
</div>

@functions {
    public IHtmlContent GetBadgeHtml(ApplicationStatus status)
    {
        var icon = status switch
        {
            ApplicationStatus.Pending => "<i class='bi bi-hourglass-split me-1'></i>",
            ApplicationStatus.Approved => "<i class='bi bi-check-circle-fill me-1'></i>",
            ApplicationStatus.Rejected => "<i class='bi bi-x-circle-fill me-1'></i>",
            _ => ""
        };

        var css = status switch
        {
            ApplicationStatus.Pending => "badge bg-info text-white rounded-pill px-3 py-2",
            ApplicationStatus.Approved => "badge bg-success text-white rounded-pill px-3 py-2",
            ApplicationStatus.Rejected => "badge bg-danger text-white rounded-pill px-3 py-2",
            _ => "badge bg-secondary text-white rounded-pill px-3 py-2"
        };

        return new HtmlString($"<span class='{css}'>{icon} {status}</span>");
    }
}

@section Scripts {
    <script>
        setTimeout(() => {
            document.querySelectorAll('.toast').forEach(toast => {
                const bsToast = bootstrap.Toast.getOrCreateInstance(toast);
                bsToast.hide();
            });
        }, 5000);
    </script>
}
